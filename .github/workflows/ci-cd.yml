name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: Install Dependencies
        working-directory: ./app
        run: npm ci

      - name: Run Tests
        working-directory: ./app
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get latest version
        id: version
        run: |
          LATEST_VERSION=$(aws ecr describe-images --repository-name everfit-app-repo --query 'imageDetails[*].imageTags[]' --output text | grep -o 'v[0-9]*' | sort -V | tail -n 1 || echo "v0")
          NEW_VERSION="v$(( ${LATEST_VERSION#v} + 1 ))"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: everfit-app-repo
          VERSION: ${{ env.VERSION }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster everfit-app-cluster --service everfit-app-service --force-new-deployment
