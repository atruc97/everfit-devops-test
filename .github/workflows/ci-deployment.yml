name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: everfit-app-repo
  ECS_CLUSTER: everfit-app-cluster
  ECS_SERVICE: everfit-app-service
  CONTAINER_NAME: everfit-app-container

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get latest version number
        id: version
        run: |
          # Get the latest version from ECR
          LATEST_VERSION=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --region $AWS_REGION --query 'imageDetails[*].imageTags[]' --output text | grep -o 'v[0-9]*' | sort -V | tail -n 1 || echo "v0")
          # Extract number and increment
          VERSION_NUM=$(echo $LATEST_VERSION | grep -o '[0-9]*' || echo "0")
          NEW_VERSION=$((VERSION_NUM + 1))
          echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
